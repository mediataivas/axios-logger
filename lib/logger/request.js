'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true,
});
exports.default = void 0;

var _types = require('../common/types');

var _config = require('../common/config');

var _stringBuilder = _interopRequireDefault(require('../common/string-builder'));

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function requestLogger(request, config) {
    const { url, method, data, headers } = request;
    const buildConfig = (0, _config.assembleBuildConfig)(config);
    const requestAsAny = request;

    if (!requestAsAny.meta) {
        requestAsAny.meta = {};
    }

    const randomChalk = getRandomColor();
    const randomChalkBg = getRandomColor();
    requestAsAny.meta.chalk = randomChalk;
    requestAsAny.meta.chalkBg = randomChalkBg;
    requestAsAny.meta.requestStartedAt = new Date().getTime();

    if (!buildConfig.isRequestLogEnabled) {
        return request;
    }

    const stringBuilder = new _stringBuilder.default(buildConfig);
    const log = stringBuilder
        .makeLogTypeWithPrefix(_types.LOG_TYPE.REQUEST, url, undefined, randomChalk, randomChalkBg)
        .makeDateFormat(new Date())
        .makeMethod(method)
        .makeHeader(headers)
        .makeData(data)
        .build();
    buildConfig.logger(log);
    return request;
}

let lastRandomIndex = -1;

function getRandomColor() {
    const colors = ['yellow', 'blue', 'magenta', 'cyan', 'white', 'grey', 'black'];
    let randomTextColorIndex;

    do {
        randomTextColorIndex = Math.floor(Math.random() * colors.length);
    } while (lastRandomIndex === randomTextColorIndex);

    lastRandomIndex = randomTextColorIndex;
    return colors[randomTextColorIndex];
}

var _default = requestLogger;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sb2dnZXIvcmVxdWVzdC50cyJdLCJuYW1lcyI6WyJyZXF1ZXN0TG9nZ2VyIiwicmVxdWVzdCIsImNvbmZpZyIsInVybCIsIm1ldGhvZCIsImRhdGEiLCJoZWFkZXJzIiwiYnVpbGRDb25maWciLCJyZXF1ZXN0QXNBbnkiLCJtZXRhIiwicmFuZG9tQ2hhbGsiLCJnZXRSYW5kb21Db2xvciIsInJhbmRvbUNoYWxrQmciLCJjaGFsayIsImNoYWxrQmciLCJyZXF1ZXN0U3RhcnRlZEF0IiwiRGF0ZSIsImdldFRpbWUiLCJpc1JlcXVlc3RMb2dFbmFibGVkIiwic3RyaW5nQnVpbGRlciIsIlN0cmluZ0J1aWxkZXIiLCJsb2ciLCJtYWtlTG9nVHlwZVdpdGhQcmVmaXgiLCJMT0dfVFlQRSIsIlJFUVVFU1QiLCJ1bmRlZmluZWQiLCJtYWtlRGF0ZUZvcm1hdCIsIm1ha2VNZXRob2QiLCJtYWtlSGVhZGVyIiwibWFrZURhdGEiLCJidWlsZCIsImxvZ2dlciIsImxhc3RSYW5kb21JbmRleCIsImNvbG9ycyIsInJhbmRvbVRleHRDb2xvckluZGV4IiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwibGVuZ3RoIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFHQSxTQUFTQSxhQUFULENBQXVCQyxPQUF2QixFQUFvREMsTUFBcEQsRUFBK0U7QUFFM0UsUUFBTTtBQUFDQyxJQUFBQSxHQUFEO0FBQU1DLElBQUFBLE1BQU47QUFBY0MsSUFBQUEsSUFBZDtBQUFvQkMsSUFBQUE7QUFBcEIsTUFBK0JMLE9BQXJDO0FBQ0EsUUFBTU0sV0FBVyxHQUFHLGlDQUFvQkwsTUFBcEIsQ0FBcEI7QUFDQSxRQUFNTSxZQUFZLEdBQUdQLE9BQXJCOztBQUNBLE1BQUcsQ0FBQ08sWUFBWSxDQUFDQyxJQUFqQixFQUF1QjtBQUNuQkQsSUFBQUEsWUFBWSxDQUFDQyxJQUFiLEdBQW9CLEVBQXBCO0FBQ0g7O0FBQ0QsUUFBTUMsV0FBVyxHQUFHQyxjQUFjLEVBQWxDO0FBQ0EsUUFBTUMsYUFBYSxHQUFHRCxjQUFjLEVBQXBDO0FBQ0FILEVBQUFBLFlBQVksQ0FBQ0MsSUFBYixDQUFrQkksS0FBbEIsR0FBMEJILFdBQTFCO0FBQ0FGLEVBQUFBLFlBQVksQ0FBQ0MsSUFBYixDQUFrQkssT0FBbEIsR0FBNEJGLGFBQTVCO0FBRUFKLEVBQUFBLFlBQVksQ0FBQ0MsSUFBYixDQUFrQk0sZ0JBQWxCLEdBQXFDLElBQUlDLElBQUosR0FBV0MsT0FBWCxFQUFyQzs7QUFFQSxNQUFJLENBQUNWLFdBQVcsQ0FBQ1csbUJBQWpCLEVBQXNDO0FBQ2xDLFdBQU9qQixPQUFQO0FBQ0g7O0FBRUQsUUFBTWtCLGFBQWEsR0FBRyxJQUFJQyxzQkFBSixDQUFrQmIsV0FBbEIsQ0FBdEI7QUFDQSxRQUFNYyxHQUFHLEdBQUdGLGFBQWEsQ0FDcEJHLHFCQURPLENBQ2VDLGdCQUFTQyxPQUR4QixFQUNpQ3JCLEdBRGpDLEVBQ3NDc0IsU0FEdEMsRUFDaURmLFdBRGpELEVBQzhERSxhQUQ5RCxFQUVQYyxjQUZPLENBRVEsSUFBSVYsSUFBSixFQUZSLEVBR1BXLFVBSE8sQ0FHSXZCLE1BSEosRUFJUHdCLFVBSk8sQ0FJSXRCLE9BSkosRUFLUHVCLFFBTE8sQ0FLRXhCLElBTEYsRUFNUHlCLEtBTk8sRUFBWjtBQVFBdkIsRUFBQUEsV0FBVyxDQUFDd0IsTUFBWixDQUFtQlYsR0FBbkI7QUFFQSxTQUFPcEIsT0FBUDtBQUNIOztBQUVELElBQUkrQixlQUF1QixHQUFHLENBQUMsQ0FBL0I7O0FBRUEsU0FBU3JCLGNBQVQsR0FBMEI7QUFDdEIsUUFBTXNCLE1BQU0sR0FBRyxDQUFDLFFBQUQsRUFBVyxNQUFYLEVBQW1CLFNBQW5CLEVBQThCLE1BQTlCLEVBQXNDLE9BQXRDLEVBQStDLE1BQS9DLEVBQXVELE9BQXZELENBQWY7QUFDQSxNQUFJQyxvQkFBSjs7QUFDQSxLQUFHO0FBQ0NBLElBQUFBLG9CQUFvQixHQUFHQyxJQUFJLENBQUNDLEtBQUwsQ0FBV0QsSUFBSSxDQUFDRSxNQUFMLEtBQWdCSixNQUFNLENBQUNLLE1BQWxDLENBQXZCO0FBQ0gsR0FGRCxRQUVRTixlQUFlLEtBQUtFLG9CQUY1Qjs7QUFJQUYsRUFBQUEsZUFBZSxHQUFHRSxvQkFBbEI7QUFDQSxTQUFPRCxNQUFNLENBQUNDLG9CQUFELENBQWI7QUFDSDs7ZUFFY2xDLGEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBeGlvc1JlcXVlc3RDb25maWcgfSBmcm9tICdheGlvcyc7XG5pbXBvcnQgeyBMT0dfVFlQRSwgUmVxdWVzdExvZ0NvbmZpZyB9IGZyb20gJy4uL2NvbW1vbi90eXBlcyc7XG5pbXBvcnQgeyBhc3NlbWJsZUJ1aWxkQ29uZmlnIH0gZnJvbSAnLi4vY29tbW9uL2NvbmZpZyc7XG5pbXBvcnQgU3RyaW5nQnVpbGRlciBmcm9tICcuLi9jb21tb24vc3RyaW5nLWJ1aWxkZXInO1xuXG5cbmZ1bmN0aW9uIHJlcXVlc3RMb2dnZXIocmVxdWVzdDogQXhpb3NSZXF1ZXN0Q29uZmlnLCBjb25maWc/OiBSZXF1ZXN0TG9nQ29uZmlnKSB7XG5cbiAgICBjb25zdCB7dXJsLCBtZXRob2QsIGRhdGEsIGhlYWRlcnN9ID0gcmVxdWVzdDtcbiAgICBjb25zdCBidWlsZENvbmZpZyA9IGFzc2VtYmxlQnVpbGRDb25maWcoY29uZmlnKTtcbiAgICBjb25zdCByZXF1ZXN0QXNBbnkgPSByZXF1ZXN0IGFzIGFueTtcbiAgICBpZighcmVxdWVzdEFzQW55Lm1ldGEpIHtcbiAgICAgICAgcmVxdWVzdEFzQW55Lm1ldGEgPSB7fTtcbiAgICB9XG4gICAgY29uc3QgcmFuZG9tQ2hhbGsgPSBnZXRSYW5kb21Db2xvcigpO1xuICAgIGNvbnN0IHJhbmRvbUNoYWxrQmcgPSBnZXRSYW5kb21Db2xvcigpO1xuICAgIHJlcXVlc3RBc0FueS5tZXRhLmNoYWxrID0gcmFuZG9tQ2hhbGs7XG4gICAgcmVxdWVzdEFzQW55Lm1ldGEuY2hhbGtCZyA9IHJhbmRvbUNoYWxrQmc7XG5cbiAgICByZXF1ZXN0QXNBbnkubWV0YS5yZXF1ZXN0U3RhcnRlZEF0ID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG5cbiAgICBpZiAoIWJ1aWxkQ29uZmlnLmlzUmVxdWVzdExvZ0VuYWJsZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlcXVlc3Q7XG4gICAgfVxuXG4gICAgY29uc3Qgc3RyaW5nQnVpbGRlciA9IG5ldyBTdHJpbmdCdWlsZGVyKGJ1aWxkQ29uZmlnKTtcbiAgICBjb25zdCBsb2cgPSBzdHJpbmdCdWlsZGVyXG4gICAgICAgIC5tYWtlTG9nVHlwZVdpdGhQcmVmaXgoTE9HX1RZUEUuUkVRVUVTVCwgdXJsLCB1bmRlZmluZWQsIHJhbmRvbUNoYWxrLCByYW5kb21DaGFsa0JnKVxuICAgICAgICAubWFrZURhdGVGb3JtYXQobmV3IERhdGUoKSlcbiAgICAgICAgLm1ha2VNZXRob2QobWV0aG9kKVxuICAgICAgICAubWFrZUhlYWRlcihoZWFkZXJzKVxuICAgICAgICAubWFrZURhdGEoZGF0YSlcbiAgICAgICAgLmJ1aWxkKCk7XG5cbiAgICBidWlsZENvbmZpZy5sb2dnZXIobG9nKTtcblxuICAgIHJldHVybiByZXF1ZXN0O1xufVxuXG5sZXQgbGFzdFJhbmRvbUluZGV4OiBudW1iZXIgPSAtMTtcblxuZnVuY3Rpb24gZ2V0UmFuZG9tQ29sb3IoKSB7XG4gICAgY29uc3QgY29sb3JzID0gW1wieWVsbG93XCIsIFwiYmx1ZVwiLCBcIm1hZ2VudGFcIiwgXCJjeWFuXCIsIFwid2hpdGVcIiwgXCJncmV5XCIsIFwiYmxhY2tcIl07XG4gICAgbGV0IHJhbmRvbVRleHRDb2xvckluZGV4XG4gICAgZG8ge1xuICAgICAgICByYW5kb21UZXh0Q29sb3JJbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGNvbG9ycy5sZW5ndGgpO1xuICAgIH0gd2hpbGUobGFzdFJhbmRvbUluZGV4ID09PSByYW5kb21UZXh0Q29sb3JJbmRleCk7XG5cbiAgICBsYXN0UmFuZG9tSW5kZXggPSByYW5kb21UZXh0Q29sb3JJbmRleDtcbiAgICByZXR1cm4gY29sb3JzW3JhbmRvbVRleHRDb2xvckluZGV4XTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcmVxdWVzdExvZ2dlcjtcbiJdfQ==
