"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _types = require("../common/types");

var _config = require("../common/config");

var _stringBuilder = _interopRequireDefault(require("../common/string-builder"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function requestLogger(request, config) {
  const {
    url,
    method,
    data,
    headers
  } = request;
  const buildConfig = (0, _config.assembleBuildConfig)(config);
  const requestAsAny = request;

  if (!requestAsAny.meta) {
    requestAsAny.meta = {};
  }

  const randomChalk = getRandomColor();
  const randomChalkBg = getRandomColor();
  const randomId = makeId();
  requestAsAny.meta.chalk = randomChalk;
  requestAsAny.meta.chalkBg = randomChalkBg;
  requestAsAny.meta.randomId = randomId;
  requestAsAny.meta.requestStartedAt = new Date().getTime();

  if (!buildConfig.isRequestLogEnabled) {
    return request;
  }

  const stringBuilder = new _stringBuilder.default(buildConfig);
  const log = stringBuilder.makeLogTypeWithPrefix(_types.LOG_TYPE.REQUEST, url, undefined, randomChalk, randomChalkBg, randomId).makeDateFormat(new Date()).makeMethod(method).makeHeader(headers).makeData(data).build();
  buildConfig.logger(log);
  return request;
}

let lastRandomIndex = -1;

function getRandomColor() {
  const colors = ["yellow", "blue", "magenta", "cyan", "white", "grey", "black"];
  let randomTextColorIndex;

  do {
    randomTextColorIndex = Math.floor(Math.random() * colors.length);
  } while (lastRandomIndex === randomTextColorIndex);

  lastRandomIndex = randomTextColorIndex;
  return colors[randomTextColorIndex];
}

function makeId() {
  let text = "";
  const possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

  for (var i = 0; i < 3; i++) text += possible.charAt(Math.floor(Math.random() * possible.length));

  return text;
}

var _default = requestLogger;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sb2dnZXIvcmVxdWVzdC50cyJdLCJuYW1lcyI6WyJyZXF1ZXN0TG9nZ2VyIiwicmVxdWVzdCIsImNvbmZpZyIsInVybCIsIm1ldGhvZCIsImRhdGEiLCJoZWFkZXJzIiwiYnVpbGRDb25maWciLCJyZXF1ZXN0QXNBbnkiLCJtZXRhIiwicmFuZG9tQ2hhbGsiLCJnZXRSYW5kb21Db2xvciIsInJhbmRvbUNoYWxrQmciLCJyYW5kb21JZCIsIm1ha2VJZCIsImNoYWxrIiwiY2hhbGtCZyIsInJlcXVlc3RTdGFydGVkQXQiLCJEYXRlIiwiZ2V0VGltZSIsImlzUmVxdWVzdExvZ0VuYWJsZWQiLCJzdHJpbmdCdWlsZGVyIiwiU3RyaW5nQnVpbGRlciIsImxvZyIsIm1ha2VMb2dUeXBlV2l0aFByZWZpeCIsIkxPR19UWVBFIiwiUkVRVUVTVCIsInVuZGVmaW5lZCIsIm1ha2VEYXRlRm9ybWF0IiwibWFrZU1ldGhvZCIsIm1ha2VIZWFkZXIiLCJtYWtlRGF0YSIsImJ1aWxkIiwibG9nZ2VyIiwibGFzdFJhbmRvbUluZGV4IiwiY29sb3JzIiwicmFuZG9tVGV4dENvbG9ySW5kZXgiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJsZW5ndGgiLCJ0ZXh0IiwicG9zc2libGUiLCJpIiwiY2hhckF0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFHQSxTQUFTQSxhQUFULENBQXVCQyxPQUF2QixFQUFvREMsTUFBcEQsRUFBK0U7QUFFM0UsUUFBTTtBQUFDQyxJQUFBQSxHQUFEO0FBQU1DLElBQUFBLE1BQU47QUFBY0MsSUFBQUEsSUFBZDtBQUFvQkMsSUFBQUE7QUFBcEIsTUFBK0JMLE9BQXJDO0FBQ0EsUUFBTU0sV0FBVyxHQUFHLGlDQUFvQkwsTUFBcEIsQ0FBcEI7QUFDQSxRQUFNTSxZQUFZLEdBQUdQLE9BQXJCOztBQUNBLE1BQUcsQ0FBQ08sWUFBWSxDQUFDQyxJQUFqQixFQUF1QjtBQUNuQkQsSUFBQUEsWUFBWSxDQUFDQyxJQUFiLEdBQW9CLEVBQXBCO0FBQ0g7O0FBQ0QsUUFBTUMsV0FBVyxHQUFHQyxjQUFjLEVBQWxDO0FBQ0EsUUFBTUMsYUFBYSxHQUFHRCxjQUFjLEVBQXBDO0FBQ0EsUUFBTUUsUUFBUSxHQUFHQyxNQUFNLEVBQXZCO0FBRUFOLEVBQUFBLFlBQVksQ0FBQ0MsSUFBYixDQUFrQk0sS0FBbEIsR0FBMEJMLFdBQTFCO0FBQ0FGLEVBQUFBLFlBQVksQ0FBQ0MsSUFBYixDQUFrQk8sT0FBbEIsR0FBNEJKLGFBQTVCO0FBQ0FKLEVBQUFBLFlBQVksQ0FBQ0MsSUFBYixDQUFrQkksUUFBbEIsR0FBNkJBLFFBQTdCO0FBRUFMLEVBQUFBLFlBQVksQ0FBQ0MsSUFBYixDQUFrQlEsZ0JBQWxCLEdBQXFDLElBQUlDLElBQUosR0FBV0MsT0FBWCxFQUFyQzs7QUFFQSxNQUFJLENBQUNaLFdBQVcsQ0FBQ2EsbUJBQWpCLEVBQXNDO0FBQ2xDLFdBQU9uQixPQUFQO0FBQ0g7O0FBRUQsUUFBTW9CLGFBQWEsR0FBRyxJQUFJQyxzQkFBSixDQUFrQmYsV0FBbEIsQ0FBdEI7QUFDQSxRQUFNZ0IsR0FBRyxHQUFHRixhQUFhLENBQ3BCRyxxQkFETyxDQUNlQyxnQkFBU0MsT0FEeEIsRUFDaUN2QixHQURqQyxFQUNzQ3dCLFNBRHRDLEVBQ2lEakIsV0FEakQsRUFDOERFLGFBRDlELEVBQzZFQyxRQUQ3RSxFQUVQZSxjQUZPLENBRVEsSUFBSVYsSUFBSixFQUZSLEVBR1BXLFVBSE8sQ0FHSXpCLE1BSEosRUFJUDBCLFVBSk8sQ0FJSXhCLE9BSkosRUFLUHlCLFFBTE8sQ0FLRTFCLElBTEYsRUFNUDJCLEtBTk8sRUFBWjtBQVFBekIsRUFBQUEsV0FBVyxDQUFDMEIsTUFBWixDQUFtQlYsR0FBbkI7QUFFQSxTQUFPdEIsT0FBUDtBQUNIOztBQUVELElBQUlpQyxlQUF1QixHQUFHLENBQUMsQ0FBL0I7O0FBRUEsU0FBU3ZCLGNBQVQsR0FBMEI7QUFDdEIsUUFBTXdCLE1BQU0sR0FBRyxDQUFDLFFBQUQsRUFBVyxNQUFYLEVBQW1CLFNBQW5CLEVBQThCLE1BQTlCLEVBQXNDLE9BQXRDLEVBQStDLE1BQS9DLEVBQXVELE9BQXZELENBQWY7QUFDQSxNQUFJQyxvQkFBSjs7QUFDQSxLQUFHO0FBQ0NBLElBQUFBLG9CQUFvQixHQUFHQyxJQUFJLENBQUNDLEtBQUwsQ0FBV0QsSUFBSSxDQUFDRSxNQUFMLEtBQWdCSixNQUFNLENBQUNLLE1BQWxDLENBQXZCO0FBQ0gsR0FGRCxRQUVRTixlQUFlLEtBQUtFLG9CQUY1Qjs7QUFJQUYsRUFBQUEsZUFBZSxHQUFHRSxvQkFBbEI7QUFDQSxTQUFPRCxNQUFNLENBQUNDLG9CQUFELENBQWI7QUFDSDs7QUFFRCxTQUFTdEIsTUFBVCxHQUEwQjtBQUN0QixNQUFJMkIsSUFBSSxHQUFHLEVBQVg7QUFDQSxRQUFNQyxRQUFRLEdBQUcsZ0VBQWpCOztBQUVBLE9BQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRyxDQUFwQixFQUF1QkEsQ0FBQyxFQUF4QixFQUNJRixJQUFJLElBQUlDLFFBQVEsQ0FBQ0UsTUFBVCxDQUFnQlAsSUFBSSxDQUFDQyxLQUFMLENBQVdELElBQUksQ0FBQ0UsTUFBTCxLQUFnQkcsUUFBUSxDQUFDRixNQUFwQyxDQUFoQixDQUFSOztBQUVKLFNBQU9DLElBQVA7QUFDSDs7ZUFFY3pDLGEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBeGlvc1JlcXVlc3RDb25maWcgfSBmcm9tICdheGlvcyc7XG5pbXBvcnQgeyBMT0dfVFlQRSwgUmVxdWVzdExvZ0NvbmZpZyB9IGZyb20gJy4uL2NvbW1vbi90eXBlcyc7XG5pbXBvcnQgeyBhc3NlbWJsZUJ1aWxkQ29uZmlnIH0gZnJvbSAnLi4vY29tbW9uL2NvbmZpZyc7XG5pbXBvcnQgU3RyaW5nQnVpbGRlciBmcm9tICcuLi9jb21tb24vc3RyaW5nLWJ1aWxkZXInO1xuXG5cbmZ1bmN0aW9uIHJlcXVlc3RMb2dnZXIocmVxdWVzdDogQXhpb3NSZXF1ZXN0Q29uZmlnLCBjb25maWc/OiBSZXF1ZXN0TG9nQ29uZmlnKSB7XG5cbiAgICBjb25zdCB7dXJsLCBtZXRob2QsIGRhdGEsIGhlYWRlcnN9ID0gcmVxdWVzdDtcbiAgICBjb25zdCBidWlsZENvbmZpZyA9IGFzc2VtYmxlQnVpbGRDb25maWcoY29uZmlnKTtcbiAgICBjb25zdCByZXF1ZXN0QXNBbnkgPSByZXF1ZXN0IGFzIGFueTtcbiAgICBpZighcmVxdWVzdEFzQW55Lm1ldGEpIHtcbiAgICAgICAgcmVxdWVzdEFzQW55Lm1ldGEgPSB7fTtcbiAgICB9XG4gICAgY29uc3QgcmFuZG9tQ2hhbGsgPSBnZXRSYW5kb21Db2xvcigpO1xuICAgIGNvbnN0IHJhbmRvbUNoYWxrQmcgPSBnZXRSYW5kb21Db2xvcigpO1xuICAgIGNvbnN0IHJhbmRvbUlkID0gbWFrZUlkKCk7XG5cbiAgICByZXF1ZXN0QXNBbnkubWV0YS5jaGFsayA9IHJhbmRvbUNoYWxrO1xuICAgIHJlcXVlc3RBc0FueS5tZXRhLmNoYWxrQmcgPSByYW5kb21DaGFsa0JnO1xuICAgIHJlcXVlc3RBc0FueS5tZXRhLnJhbmRvbUlkID0gcmFuZG9tSWQ7XG5cbiAgICByZXF1ZXN0QXNBbnkubWV0YS5yZXF1ZXN0U3RhcnRlZEF0ID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG5cbiAgICBpZiAoIWJ1aWxkQ29uZmlnLmlzUmVxdWVzdExvZ0VuYWJsZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlcXVlc3Q7XG4gICAgfVxuXG4gICAgY29uc3Qgc3RyaW5nQnVpbGRlciA9IG5ldyBTdHJpbmdCdWlsZGVyKGJ1aWxkQ29uZmlnKTtcbiAgICBjb25zdCBsb2cgPSBzdHJpbmdCdWlsZGVyXG4gICAgICAgIC5tYWtlTG9nVHlwZVdpdGhQcmVmaXgoTE9HX1RZUEUuUkVRVUVTVCwgdXJsLCB1bmRlZmluZWQsIHJhbmRvbUNoYWxrLCByYW5kb21DaGFsa0JnLCByYW5kb21JZClcbiAgICAgICAgLm1ha2VEYXRlRm9ybWF0KG5ldyBEYXRlKCkpXG4gICAgICAgIC5tYWtlTWV0aG9kKG1ldGhvZClcbiAgICAgICAgLm1ha2VIZWFkZXIoaGVhZGVycylcbiAgICAgICAgLm1ha2VEYXRhKGRhdGEpXG4gICAgICAgIC5idWlsZCgpO1xuXG4gICAgYnVpbGRDb25maWcubG9nZ2VyKGxvZyk7XG5cbiAgICByZXR1cm4gcmVxdWVzdDtcbn1cblxubGV0IGxhc3RSYW5kb21JbmRleDogbnVtYmVyID0gLTE7XG5cbmZ1bmN0aW9uIGdldFJhbmRvbUNvbG9yKCkge1xuICAgIGNvbnN0IGNvbG9ycyA9IFtcInllbGxvd1wiLCBcImJsdWVcIiwgXCJtYWdlbnRhXCIsIFwiY3lhblwiLCBcIndoaXRlXCIsIFwiZ3JleVwiLCBcImJsYWNrXCJdO1xuICAgIGxldCByYW5kb21UZXh0Q29sb3JJbmRleFxuICAgIGRvIHtcbiAgICAgICAgcmFuZG9tVGV4dENvbG9ySW5kZXggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBjb2xvcnMubGVuZ3RoKTtcbiAgICB9IHdoaWxlKGxhc3RSYW5kb21JbmRleCA9PT0gcmFuZG9tVGV4dENvbG9ySW5kZXgpO1xuXG4gICAgbGFzdFJhbmRvbUluZGV4ID0gcmFuZG9tVGV4dENvbG9ySW5kZXg7XG4gICAgcmV0dXJuIGNvbG9yc1tyYW5kb21UZXh0Q29sb3JJbmRleF07XG59XG5cbmZ1bmN0aW9uIG1ha2VJZCgpOiBzdHJpbmcge1xuICAgIGxldCB0ZXh0ID0gXCJcIjtcbiAgICBjb25zdCBwb3NzaWJsZSA9IFwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODlcIjtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMzsgaSsrKVxuICAgICAgICB0ZXh0ICs9IHBvc3NpYmxlLmNoYXJBdChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBwb3NzaWJsZS5sZW5ndGgpKTtcblxuICAgIHJldHVybiB0ZXh0O1xufVxuXG5leHBvcnQgZGVmYXVsdCByZXF1ZXN0TG9nZ2VyO1xuIl19