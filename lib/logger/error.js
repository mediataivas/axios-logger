'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true,
});
exports.errorLogger = errorLogger;
exports.errorLoggerWithoutPromise = errorLoggerWithoutPromise;

var _config = require('../common/config');

var _stringBuilder = _interopRequireDefault(require('../common/string-builder'));

var _print = require('../common/print');

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function errorLoggerWithoutPromise(error, config) {
    const {
        config: { method, url },
        response,
    } = error;
    let status, statusText, data, headers;

    if (response) {
        status = response.status;
        statusText = response.statusText;
        data = response.data;
        headers = response.headers;
    }

    const buildConfig = (0, _config.assembleBuildConfig)(config);
    const stringBuilder = new _stringBuilder.default(buildConfig);
    const log = stringBuilder
        .makeLogTypeWithPrefix('Error')
        .makeDateFormat(new Date())
        .makeMethod(method)
        .makeUrl(url)
        .makeStatus(status, statusText)
        .makeHeader(headers)
        .makeData(data)
        .build();
    (0, _print.printLog)(log, buildConfig);
    return error;
}

function errorLogger(error, config) {
    return Promise.reject(errorLoggerWithoutPromise(error, config));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sb2dnZXIvZXJyb3IudHMiXSwibmFtZXMiOlsiZXJyb3JMb2dnZXJXaXRob3V0UHJvbWlzZSIsImVycm9yIiwiY29uZmlnIiwibWV0aG9kIiwidXJsIiwicmVzcG9uc2UiLCJzdGF0dXMiLCJzdGF0dXNUZXh0IiwiZGF0YSIsImhlYWRlcnMiLCJidWlsZENvbmZpZyIsInN0cmluZ0J1aWxkZXIiLCJTdHJpbmdCdWlsZGVyIiwibG9nIiwibWFrZUxvZ1R5cGVXaXRoUHJlZml4IiwibWFrZURhdGVGb3JtYXQiLCJEYXRlIiwibWFrZU1ldGhvZCIsIm1ha2VVcmwiLCJtYWtlU3RhdHVzIiwibWFrZUhlYWRlciIsIm1ha2VEYXRhIiwiYnVpbGQiLCJlcnJvckxvZ2dlciIsIlByb21pc2UiLCJyZWplY3QiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBRUE7O0FBQ0E7O0FBQ0E7Ozs7QUFFQSxTQUFTQSx5QkFBVCxDQUFtQ0MsS0FBbkMsRUFBc0RDLE1BQXRELEVBQStFO0FBRTNFLFFBQU07QUFBQ0EsSUFBQUEsTUFBTSxFQUFFO0FBQUVDLE1BQUFBLE1BQUY7QUFBVUMsTUFBQUE7QUFBVixLQUFUO0FBQTBCQyxJQUFBQTtBQUExQixNQUFzQ0osS0FBNUM7QUFFQSxNQUFJSyxNQUFKLEVBQVlDLFVBQVosRUFBd0JDLElBQXhCLEVBQThCQyxPQUE5Qjs7QUFDQSxNQUFJSixRQUFKLEVBQWM7QUFDVkMsSUFBQUEsTUFBTSxHQUFHRCxRQUFRLENBQUNDLE1BQWxCO0FBQ0FDLElBQUFBLFVBQVUsR0FBR0YsUUFBUSxDQUFDRSxVQUF0QjtBQUNBQyxJQUFBQSxJQUFJLEdBQUdILFFBQVEsQ0FBQ0csSUFBaEI7QUFDQUMsSUFBQUEsT0FBTyxHQUFHSixRQUFRLENBQUNJLE9BQW5CO0FBQ0g7O0FBRUQsUUFBTUMsV0FBVyxHQUFHLGlDQUFvQlIsTUFBcEIsQ0FBcEI7QUFFQSxRQUFNUyxhQUFhLEdBQUcsSUFBSUMsc0JBQUosQ0FBa0JGLFdBQWxCLENBQXRCO0FBQ0EsUUFBTUcsR0FBRyxHQUFHRixhQUFhLENBQ3BCRyxxQkFETyxDQUNlLE9BRGYsRUFFUEMsY0FGTyxDQUVRLElBQUlDLElBQUosRUFGUixFQUdQQyxVQUhPLENBR0lkLE1BSEosRUFJUGUsT0FKTyxDQUlDZCxHQUpELEVBS1BlLFVBTE8sQ0FLSWIsTUFMSixFQUtZQyxVQUxaLEVBTVBhLFVBTk8sQ0FNSVgsT0FOSixFQU9QWSxRQVBPLENBT0ViLElBUEYsRUFRUGMsS0FSTyxFQUFaO0FBVUEsdUJBQVNULEdBQVQsRUFBY0gsV0FBZDtBQUVBLFNBQU9ULEtBQVA7QUFDSDs7QUFFRCxTQUFTc0IsV0FBVCxDQUFxQnRCLEtBQXJCLEVBQXdDQyxNQUF4QyxFQUFpRTtBQUM3RCxTQUFPc0IsT0FBTyxDQUFDQyxNQUFSLENBQWV6Qix5QkFBeUIsQ0FBQ0MsS0FBRCxFQUFRQyxNQUFSLENBQXhDLENBQVA7QUFDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEF4aW9zRXJyb3IgfSBmcm9tICdheGlvcyc7XG5pbXBvcnQgeyBFcnJvckxvZ0NvbmZpZyB9IGZyb20gJy4uL2NvbW1vbi90eXBlcyc7XG5pbXBvcnQgeyBhc3NlbWJsZUJ1aWxkQ29uZmlnIH0gZnJvbSAnLi4vY29tbW9uL2NvbmZpZyc7XG5pbXBvcnQgU3RyaW5nQnVpbGRlciBmcm9tICcuLi9jb21tb24vc3RyaW5nLWJ1aWxkZXInO1xuaW1wb3J0IHsgcHJpbnRMb2cgfSBmcm9tICcuLi9jb21tb24vcHJpbnQnO1xuXG5mdW5jdGlvbiBlcnJvckxvZ2dlcldpdGhvdXRQcm9taXNlKGVycm9yOiBBeGlvc0Vycm9yLCBjb25maWc/OiBFcnJvckxvZ0NvbmZpZykge1xuXG4gICAgY29uc3Qge2NvbmZpZzogeyBtZXRob2QsIHVybCB9LCByZXNwb25zZX0gPSBlcnJvcjtcblxuICAgIGxldCBzdGF0dXMsIHN0YXR1c1RleHQsIGRhdGEsIGhlYWRlcnM7XG4gICAgaWYgKHJlc3BvbnNlKSB7XG4gICAgICAgIHN0YXR1cyA9IHJlc3BvbnNlLnN0YXR1cztcbiAgICAgICAgc3RhdHVzVGV4dCA9IHJlc3BvbnNlLnN0YXR1c1RleHQ7XG4gICAgICAgIGRhdGEgPSByZXNwb25zZS5kYXRhO1xuICAgICAgICBoZWFkZXJzID0gcmVzcG9uc2UuaGVhZGVycztcbiAgICB9XG5cbiAgICBjb25zdCBidWlsZENvbmZpZyA9IGFzc2VtYmxlQnVpbGRDb25maWcoY29uZmlnKTtcblxuICAgIGNvbnN0IHN0cmluZ0J1aWxkZXIgPSBuZXcgU3RyaW5nQnVpbGRlcihidWlsZENvbmZpZyk7XG4gICAgY29uc3QgbG9nID0gc3RyaW5nQnVpbGRlclxuICAgICAgICAubWFrZUxvZ1R5cGVXaXRoUHJlZml4KCdFcnJvcicpXG4gICAgICAgIC5tYWtlRGF0ZUZvcm1hdChuZXcgRGF0ZSgpKVxuICAgICAgICAubWFrZU1ldGhvZChtZXRob2QpXG4gICAgICAgIC5tYWtlVXJsKHVybClcbiAgICAgICAgLm1ha2VTdGF0dXMoc3RhdHVzLCBzdGF0dXNUZXh0KVxuICAgICAgICAubWFrZUhlYWRlcihoZWFkZXJzKVxuICAgICAgICAubWFrZURhdGEoZGF0YSlcbiAgICAgICAgLmJ1aWxkKCk7XG5cbiAgICBwcmludExvZyhsb2csIGJ1aWxkQ29uZmlnKTtcblxuICAgIHJldHVybiBlcnJvcjtcbn1cblxuZnVuY3Rpb24gZXJyb3JMb2dnZXIoZXJyb3I6IEF4aW9zRXJyb3IsIGNvbmZpZz86IEVycm9yTG9nQ29uZmlnKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yTG9nZ2VyV2l0aG91dFByb21pc2UoZXJyb3IsIGNvbmZpZykpO1xufVxuXG5leHBvcnQgeyBlcnJvckxvZ2dlciwgZXJyb3JMb2dnZXJXaXRob3V0UHJvbWlzZSB9O1xuIl19
