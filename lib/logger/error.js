'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true,
});
exports.errorLogger = errorLogger;
exports.errorLoggerWithoutPromise = errorLoggerWithoutPromise;

var _types = require('../common/types');

var _config = require('../common/config');

var _stringBuilder = _interopRequireDefault(require('../common/string-builder'));

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function errorLoggerWithoutPromise(error, config) {
    const {
        config: { method, url },
        response,
    } = error;
    let status, statusText, data, headers;

    if (response) {
        status = response.status;
        statusText = response.statusText;
        data = response.data;
        headers = response.headers;
    }

    const buildConfig = (0, _config.assembleBuildConfig)(config);
    const stringBuilder = new _stringBuilder.default(buildConfig);
    const log = stringBuilder
        .makeLogTypeWithPrefix(_types.LOG_TYPE.ERROR)
        .makeDateFormat(new Date())
        .makeMethod(method)
        .makeUrl(url)
        .makeStatus(status, statusText)
        .makeHeader(headers)
        .makeData(data)
        .build();
    buildConfig.errorLogger(log);
    return error;
}

function errorLogger(error, config) {
    return Promise.reject(errorLoggerWithoutPromise(error, config));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sb2dnZXIvZXJyb3IudHMiXSwibmFtZXMiOlsiZXJyb3JMb2dnZXJXaXRob3V0UHJvbWlzZSIsImVycm9yIiwiY29uZmlnIiwibWV0aG9kIiwidXJsIiwicmVzcG9uc2UiLCJzdGF0dXMiLCJzdGF0dXNUZXh0IiwiZGF0YSIsImhlYWRlcnMiLCJidWlsZENvbmZpZyIsInN0cmluZ0J1aWxkZXIiLCJTdHJpbmdCdWlsZGVyIiwibG9nIiwibWFrZUxvZ1R5cGVXaXRoUHJlZml4IiwiTE9HX1RZUEUiLCJFUlJPUiIsIm1ha2VEYXRlRm9ybWF0IiwiRGF0ZSIsIm1ha2VNZXRob2QiLCJtYWtlVXJsIiwibWFrZVN0YXR1cyIsIm1ha2VIZWFkZXIiLCJtYWtlRGF0YSIsImJ1aWxkIiwiZXJyb3JMb2dnZXIiLCJQcm9taXNlIiwicmVqZWN0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUNBOztBQUNBOztBQUNBOzs7O0FBRUEsU0FBU0EseUJBQVQsQ0FBbUNDLEtBQW5DLEVBQXNEQyxNQUF0RCxFQUErRTtBQUUzRSxRQUFNO0FBQUNBLElBQUFBLE1BQU0sRUFBRTtBQUFFQyxNQUFBQSxNQUFGO0FBQVVDLE1BQUFBO0FBQVYsS0FBVDtBQUEwQkMsSUFBQUE7QUFBMUIsTUFBc0NKLEtBQTVDO0FBRUEsTUFBSUssTUFBSixFQUFZQyxVQUFaLEVBQXdCQyxJQUF4QixFQUE4QkMsT0FBOUI7O0FBQ0EsTUFBSUosUUFBSixFQUFjO0FBQ1ZDLElBQUFBLE1BQU0sR0FBR0QsUUFBUSxDQUFDQyxNQUFsQjtBQUNBQyxJQUFBQSxVQUFVLEdBQUdGLFFBQVEsQ0FBQ0UsVUFBdEI7QUFDQUMsSUFBQUEsSUFBSSxHQUFHSCxRQUFRLENBQUNHLElBQWhCO0FBQ0FDLElBQUFBLE9BQU8sR0FBR0osUUFBUSxDQUFDSSxPQUFuQjtBQUNIOztBQUVELFFBQU1DLFdBQVcsR0FBRyxpQ0FBb0JSLE1BQXBCLENBQXBCO0FBRUEsUUFBTVMsYUFBYSxHQUFHLElBQUlDLHNCQUFKLENBQWtCRixXQUFsQixDQUF0QjtBQUNBLFFBQU1HLEdBQUcsR0FBR0YsYUFBYSxDQUNwQkcscUJBRE8sQ0FDZUMsZ0JBQVNDLEtBRHhCLEVBRVBDLGNBRk8sQ0FFUSxJQUFJQyxJQUFKLEVBRlIsRUFHUEMsVUFITyxDQUdJaEIsTUFISixFQUlQaUIsT0FKTyxDQUlDaEIsR0FKRCxFQUtQaUIsVUFMTyxDQUtJZixNQUxKLEVBS1lDLFVBTFosRUFNUGUsVUFOTyxDQU1JYixPQU5KLEVBT1BjLFFBUE8sQ0FPRWYsSUFQRixFQVFQZ0IsS0FSTyxFQUFaO0FBVUFkLEVBQUFBLFdBQVcsQ0FBQ2UsV0FBWixDQUF3QlosR0FBeEI7QUFFQSxTQUFPWixLQUFQO0FBQ0g7O0FBRUQsU0FBU3dCLFdBQVQsQ0FBcUJ4QixLQUFyQixFQUF3Q0MsTUFBeEMsRUFBaUU7QUFDN0QsU0FBT3dCLE9BQU8sQ0FBQ0MsTUFBUixDQUFlM0IseUJBQXlCLENBQUNDLEtBQUQsRUFBUUMsTUFBUixDQUF4QyxDQUFQO0FBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBeGlvc0Vycm9yIH0gZnJvbSAnYXhpb3MnO1xuaW1wb3J0IHsgRXJyb3JMb2dDb25maWcsIExPR19UWVBFIH0gZnJvbSAnLi4vY29tbW9uL3R5cGVzJztcbmltcG9ydCB7IGFzc2VtYmxlQnVpbGRDb25maWcgfSBmcm9tICcuLi9jb21tb24vY29uZmlnJztcbmltcG9ydCBTdHJpbmdCdWlsZGVyIGZyb20gJy4uL2NvbW1vbi9zdHJpbmctYnVpbGRlcic7XG5cbmZ1bmN0aW9uIGVycm9yTG9nZ2VyV2l0aG91dFByb21pc2UoZXJyb3I6IEF4aW9zRXJyb3IsIGNvbmZpZz86IEVycm9yTG9nQ29uZmlnKSB7XG5cbiAgICBjb25zdCB7Y29uZmlnOiB7IG1ldGhvZCwgdXJsIH0sIHJlc3BvbnNlfSA9IGVycm9yO1xuXG4gICAgbGV0IHN0YXR1cywgc3RhdHVzVGV4dCwgZGF0YSwgaGVhZGVycztcbiAgICBpZiAocmVzcG9uc2UpIHtcbiAgICAgICAgc3RhdHVzID0gcmVzcG9uc2Uuc3RhdHVzO1xuICAgICAgICBzdGF0dXNUZXh0ID0gcmVzcG9uc2Uuc3RhdHVzVGV4dDtcbiAgICAgICAgZGF0YSA9IHJlc3BvbnNlLmRhdGE7XG4gICAgICAgIGhlYWRlcnMgPSByZXNwb25zZS5oZWFkZXJzO1xuICAgIH1cblxuICAgIGNvbnN0IGJ1aWxkQ29uZmlnID0gYXNzZW1ibGVCdWlsZENvbmZpZyhjb25maWcpO1xuXG4gICAgY29uc3Qgc3RyaW5nQnVpbGRlciA9IG5ldyBTdHJpbmdCdWlsZGVyKGJ1aWxkQ29uZmlnKTtcbiAgICBjb25zdCBsb2cgPSBzdHJpbmdCdWlsZGVyXG4gICAgICAgIC5tYWtlTG9nVHlwZVdpdGhQcmVmaXgoTE9HX1RZUEUuRVJST1IpXG4gICAgICAgIC5tYWtlRGF0ZUZvcm1hdChuZXcgRGF0ZSgpKVxuICAgICAgICAubWFrZU1ldGhvZChtZXRob2QpXG4gICAgICAgIC5tYWtlVXJsKHVybClcbiAgICAgICAgLm1ha2VTdGF0dXMoc3RhdHVzLCBzdGF0dXNUZXh0KVxuICAgICAgICAubWFrZUhlYWRlcihoZWFkZXJzKVxuICAgICAgICAubWFrZURhdGEoZGF0YSlcbiAgICAgICAgLmJ1aWxkKCk7XG5cbiAgICBidWlsZENvbmZpZy5lcnJvckxvZ2dlcihsb2cpO1xuXG4gICAgcmV0dXJuIGVycm9yO1xufVxuXG5mdW5jdGlvbiBlcnJvckxvZ2dlcihlcnJvcjogQXhpb3NFcnJvciwgY29uZmlnPzogRXJyb3JMb2dDb25maWcpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3JMb2dnZXJXaXRob3V0UHJvbWlzZShlcnJvciwgY29uZmlnKSk7XG59XG5cbmV4cG9ydCB7IGVycm9yTG9nZ2VyLCBlcnJvckxvZ2dlcldpdGhvdXRQcm9taXNlIH07XG4iXX0=
