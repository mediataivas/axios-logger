"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.errorLogger = errorLogger;
exports.errorLoggerWithoutPromise = errorLoggerWithoutPromise;

var _types = require("../common/types");

var _config = require("../common/config");

var _stringBuilder = _interopRequireDefault(require("../common/string-builder"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function errorLoggerWithoutPromise(error, config) {
  var _respConfig$meta, _respConfig$meta2, _respConfig$meta3;

  const {
    config: {
      method,
      url
    },
    response
  } = error;
  let status, statusText, data, headers;

  if (response) {
    status = response.status;
    statusText = response.statusText;
    data = response.data;
    headers = response.headers;
  }

  const respConfig = error.config;
  const buildConfig = (0, _config.assembleBuildConfig)(config);
  const stringBuilder = new _stringBuilder.default(buildConfig);
  const log = stringBuilder.makeLogTypeWithPrefix(_types.LOG_TYPE.ERROR, url, "", (_respConfig$meta = respConfig.meta) === null || _respConfig$meta === void 0 ? void 0 : _respConfig$meta.chalk, (_respConfig$meta2 = respConfig.meta) === null || _respConfig$meta2 === void 0 ? void 0 : _respConfig$meta2.chalkBg, (_respConfig$meta3 = respConfig.meta) === null || _respConfig$meta3 === void 0 ? void 0 : _respConfig$meta3.randomId).makeDateFormat(new Date()).makeUrl(url).makeStatus(status, statusText).makeHeader(headers).makeData(data).build();

  if (buildConfig && buildConfig.errorLogger) {
    buildConfig.errorLogger(log);
  } else if (buildConfig && buildConfig.logger) {
    buildConfig.logger(log);
  } else {
    console.log(log);
  }

  return error;
}

function errorLogger(error, config) {
  return Promise.reject(errorLoggerWithoutPromise(error, config));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sb2dnZXIvZXJyb3IudHMiXSwibmFtZXMiOlsiZXJyb3JMb2dnZXJXaXRob3V0UHJvbWlzZSIsImVycm9yIiwiY29uZmlnIiwibWV0aG9kIiwidXJsIiwicmVzcG9uc2UiLCJzdGF0dXMiLCJzdGF0dXNUZXh0IiwiZGF0YSIsImhlYWRlcnMiLCJyZXNwQ29uZmlnIiwiYnVpbGRDb25maWciLCJzdHJpbmdCdWlsZGVyIiwiU3RyaW5nQnVpbGRlciIsImxvZyIsIm1ha2VMb2dUeXBlV2l0aFByZWZpeCIsIkxPR19UWVBFIiwiRVJST1IiLCJtZXRhIiwiY2hhbGsiLCJjaGFsa0JnIiwicmFuZG9tSWQiLCJtYWtlRGF0ZUZvcm1hdCIsIkRhdGUiLCJtYWtlVXJsIiwibWFrZVN0YXR1cyIsIm1ha2VIZWFkZXIiLCJtYWtlRGF0YSIsImJ1aWxkIiwiZXJyb3JMb2dnZXIiLCJsb2dnZXIiLCJjb25zb2xlIiwiUHJvbWlzZSIsInJlamVjdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQUVBLFNBQVNBLHlCQUFULENBQW1DQyxLQUFuQyxFQUFzREMsTUFBdEQsRUFBK0U7QUFBQTs7QUFFM0UsUUFBTTtBQUFDQSxJQUFBQSxNQUFNLEVBQUU7QUFBRUMsTUFBQUEsTUFBRjtBQUFVQyxNQUFBQTtBQUFWLEtBQVQ7QUFBMEJDLElBQUFBO0FBQTFCLE1BQXNDSixLQUE1QztBQUVBLE1BQUlLLE1BQUosRUFBWUMsVUFBWixFQUF3QkMsSUFBeEIsRUFBOEJDLE9BQTlCOztBQUNBLE1BQUlKLFFBQUosRUFBYztBQUNWQyxJQUFBQSxNQUFNLEdBQUdELFFBQVEsQ0FBQ0MsTUFBbEI7QUFDQUMsSUFBQUEsVUFBVSxHQUFHRixRQUFRLENBQUNFLFVBQXRCO0FBQ0FDLElBQUFBLElBQUksR0FBR0gsUUFBUSxDQUFDRyxJQUFoQjtBQUNBQyxJQUFBQSxPQUFPLEdBQUdKLFFBQVEsQ0FBQ0ksT0FBbkI7QUFDSDs7QUFDRCxRQUFNQyxVQUFVLEdBQUdULEtBQUssQ0FBQ0MsTUFBekI7QUFFQSxRQUFNUyxXQUFXLEdBQUcsaUNBQW9CVCxNQUFwQixDQUFwQjtBQUVBLFFBQU1VLGFBQWEsR0FBRyxJQUFJQyxzQkFBSixDQUFrQkYsV0FBbEIsQ0FBdEI7QUFDQSxRQUFNRyxHQUFHLEdBQUdGLGFBQWEsQ0FDcEJHLHFCQURPLENBQ2VDLGdCQUFTQyxLQUR4QixFQUMrQmIsR0FEL0IsRUFDb0MsRUFEcEMsc0JBQ3dDTSxVQUFVLENBQUNRLElBRG5ELHFEQUN3QyxpQkFBaUJDLEtBRHpELHVCQUNnRVQsVUFBVSxDQUFDUSxJQUQzRSxzREFDZ0Usa0JBQWlCRSxPQURqRix1QkFDMEZWLFVBQVUsQ0FBQ1EsSUFEckcsc0RBQzBGLGtCQUFpQkcsUUFEM0csRUFFUEMsY0FGTyxDQUVRLElBQUlDLElBQUosRUFGUixFQUdQQyxPQUhPLENBR0NwQixHQUhELEVBSVBxQixVQUpPLENBSUluQixNQUpKLEVBSVlDLFVBSlosRUFLUG1CLFVBTE8sQ0FLSWpCLE9BTEosRUFNUGtCLFFBTk8sQ0FNRW5CLElBTkYsRUFPUG9CLEtBUE8sRUFBWjs7QUFTQSxNQUFHakIsV0FBVyxJQUFJQSxXQUFXLENBQUNrQixXQUE5QixFQUEyQztBQUN2Q2xCLElBQUFBLFdBQVcsQ0FBQ2tCLFdBQVosQ0FBd0JmLEdBQXhCO0FBQ0gsR0FGRCxNQUVPLElBQUlILFdBQVcsSUFBSUEsV0FBVyxDQUFDbUIsTUFBL0IsRUFBdUM7QUFDMUNuQixJQUFBQSxXQUFXLENBQUNtQixNQUFaLENBQW1CaEIsR0FBbkI7QUFDSCxHQUZNLE1BRUE7QUFDSGlCLElBQUFBLE9BQU8sQ0FBQ2pCLEdBQVIsQ0FBWUEsR0FBWjtBQUNIOztBQUVELFNBQU9iLEtBQVA7QUFDSDs7QUFFRCxTQUFTNEIsV0FBVCxDQUFxQjVCLEtBQXJCLEVBQXdDQyxNQUF4QyxFQUFpRTtBQUM3RCxTQUFPOEIsT0FBTyxDQUFDQyxNQUFSLENBQWVqQyx5QkFBeUIsQ0FBQ0MsS0FBRCxFQUFRQyxNQUFSLENBQXhDLENBQVA7QUFDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEF4aW9zRXJyb3IgfSBmcm9tICdheGlvcyc7XG5pbXBvcnQgeyBFcnJvckxvZ0NvbmZpZywgTE9HX1RZUEUgfSBmcm9tICcuLi9jb21tb24vdHlwZXMnO1xuaW1wb3J0IHsgYXNzZW1ibGVCdWlsZENvbmZpZyB9IGZyb20gJy4uL2NvbW1vbi9jb25maWcnO1xuaW1wb3J0IFN0cmluZ0J1aWxkZXIgZnJvbSAnLi4vY29tbW9uL3N0cmluZy1idWlsZGVyJztcblxuZnVuY3Rpb24gZXJyb3JMb2dnZXJXaXRob3V0UHJvbWlzZShlcnJvcjogQXhpb3NFcnJvciwgY29uZmlnPzogRXJyb3JMb2dDb25maWcpIHtcblxuICAgIGNvbnN0IHtjb25maWc6IHsgbWV0aG9kLCB1cmwgfSwgcmVzcG9uc2V9ID0gZXJyb3I7XG5cbiAgICBsZXQgc3RhdHVzLCBzdGF0dXNUZXh0LCBkYXRhLCBoZWFkZXJzO1xuICAgIGlmIChyZXNwb25zZSkge1xuICAgICAgICBzdGF0dXMgPSByZXNwb25zZS5zdGF0dXM7XG4gICAgICAgIHN0YXR1c1RleHQgPSByZXNwb25zZS5zdGF0dXNUZXh0O1xuICAgICAgICBkYXRhID0gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgaGVhZGVycyA9IHJlc3BvbnNlLmhlYWRlcnM7XG4gICAgfVxuICAgIGNvbnN0IHJlc3BDb25maWcgPSBlcnJvci5jb25maWcgYXMgYW55O1xuXG4gICAgY29uc3QgYnVpbGRDb25maWcgPSBhc3NlbWJsZUJ1aWxkQ29uZmlnKGNvbmZpZyk7XG5cbiAgICBjb25zdCBzdHJpbmdCdWlsZGVyID0gbmV3IFN0cmluZ0J1aWxkZXIoYnVpbGRDb25maWcpO1xuICAgIGNvbnN0IGxvZyA9IHN0cmluZ0J1aWxkZXJcbiAgICAgICAgLm1ha2VMb2dUeXBlV2l0aFByZWZpeChMT0dfVFlQRS5FUlJPUiwgdXJsLCBcIlwiLCByZXNwQ29uZmlnLm1ldGE/LmNoYWxrLCByZXNwQ29uZmlnLm1ldGE/LmNoYWxrQmcsIHJlc3BDb25maWcubWV0YT8ucmFuZG9tSWQpXG4gICAgICAgIC5tYWtlRGF0ZUZvcm1hdChuZXcgRGF0ZSgpKVxuICAgICAgICAubWFrZVVybCh1cmwpXG4gICAgICAgIC5tYWtlU3RhdHVzKHN0YXR1cywgc3RhdHVzVGV4dClcbiAgICAgICAgLm1ha2VIZWFkZXIoaGVhZGVycylcbiAgICAgICAgLm1ha2VEYXRhKGRhdGEpXG4gICAgICAgIC5idWlsZCgpO1xuXG4gICAgaWYoYnVpbGRDb25maWcgJiYgYnVpbGRDb25maWcuZXJyb3JMb2dnZXIpIHtcbiAgICAgICAgYnVpbGRDb25maWcuZXJyb3JMb2dnZXIobG9nKTtcbiAgICB9IGVsc2UgaWYgKGJ1aWxkQ29uZmlnICYmIGJ1aWxkQ29uZmlnLmxvZ2dlcikge1xuICAgICAgICBidWlsZENvbmZpZy5sb2dnZXIobG9nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZyhsb2cpO1xuICAgIH1cblxuICAgIHJldHVybiBlcnJvcjtcbn1cblxuZnVuY3Rpb24gZXJyb3JMb2dnZXIoZXJyb3I6IEF4aW9zRXJyb3IsIGNvbmZpZz86IEVycm9yTG9nQ29uZmlnKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yTG9nZ2VyV2l0aG91dFByb21pc2UoZXJyb3IsIGNvbmZpZykpO1xufVxuXG5leHBvcnQgeyBlcnJvckxvZ2dlciwgZXJyb3JMb2dnZXJXaXRob3V0UHJvbWlzZSB9O1xuIl19